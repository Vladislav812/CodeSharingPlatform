type: edu
files:
- name: src/platform/CodeSharingPlatform.java
  visible: true
  text: |
    package platform;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;
    import org.springframework.web.bind.annotation.RestController;

    @SpringBootApplication
    @RestController
    public class CodeSharingPlatform {

        public static void main(String[] args) {
            SpringApplication.run(CodeSharingPlatform.class, args);
        }

    }
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    buildscript {
        apply plugin: 'hyperskill'

        repositories {
            mavenCentral()
        }
        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |
    server.port=8889
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: test/CodeSharingPlatformTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.jsoup.Jsoup;
    import org.jsoup.nodes.Document;
    import org.jsoup.nodes.Element;
    import org.jsoup.select.Elements;
    import platform.CodeSharingPlatform;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isObject;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isString;

    public class CodeSharingPlatformTest extends SpringTest {
        public CodeSharingPlatformTest() {
            super(CodeSharingPlatform.class);
        }

        final String API_CODE = "/api/code";
        final String WEB_CODE = "/code";

        final String API_CODE_NEW = "/api/code/new";
        final String WEB_CODE_NEW = "/code/new";

        final String[] SNIPPETS = {
            "public static void ...",
            "class Code { ..."
        };

        static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        static void checkTitle(Document doc, String url, String title) {
            if (!doc.title().equals(title)) {
                throw new WrongAnswer("GET " + url +
                    " should contain title \"" + title + "\"");
            }
        }

        static Element checkSingleTag(Document doc, String url, String tag) {
            Elements elems = checkElemsByTag(doc, url, tag, 1);
            return elems.get(0);
        }

        static Elements checkElemsByTag(Document doc, String url, String tag, int length) {
            Elements elems = doc.getElementsByTag(tag);
            if (elems.size() != length) {
                throw new WrongAnswer("GET " + url +
                    " should contain " + length + " <" + tag + "> " +
                    "element"+ (length == 1 ? "" : "s") +", found: " + elems.size());
            }
            return elems;
        }

        static Element getById(Document doc, String url, String id, String tag) {
            Element elem = doc.getElementById(id);

            if (elem == null) {
                throw new WrongAnswer("GET " + url +
                    " should contain an element with id \"" + id + "\", no one found");
            }

            if (!elem.tagName().equals(tag)) {
                throw new WrongAnswer("GET " + url +
                    " should contain an element with id  \"" + id + "\" and tag \"" + tag + "\", " +
                    "found another tag: \"" + elem.tagName() + "\"");
            }

            return elem;
        }

        @DynamicTestingMethod
        public DynamicTesting[] dt = new DynamicTesting[] {
            this::getApiCode,
            this::checkApiCode,
            this::checkWebCode,
            this::checkWebCodeNew,

            () -> postSnippet(SNIPPETS[0]),
            this::getApiCode,
            this::checkApiCode,
            this::checkWebCode,

            () -> postSnippet(SNIPPETS[1]),
            this::getApiCode,
            this::checkApiCode,
            this::checkWebCode,
        };


        String apiSnippetCode;
        String apiSnippetDate;

        private CheckResult getApiCode() {
            HttpResponse resp = get(API_CODE).send();
            checkStatusCode(resp, 200);

            expect(resp.getContent()).asJson().check(
                isObject()
                    .value("code", isString(value -> {
                        if (apiSnippetCode == null) {
                            apiSnippetCode = value;
                            return true;
                        }
                        return apiSnippetCode.equals(value);
                    }))
                    .value("date", isString(value -> {
                        apiSnippetDate = value;
                        return true;
                    }))
            );

            return CheckResult.correct();
        }

        private CheckResult checkApiCode() {
            HttpResponse resp = get(API_CODE).send();
            checkStatusCode(resp, 200);

            expect(resp.getContent()).asJson().check(
                isObject()
                    .value("code", isString(value -> apiSnippetCode.equals(value)))
                    .value("date", isString(value -> apiSnippetDate.equals(value)))
            );

            return CheckResult.correct();
        }

        private CheckResult checkWebCode() {
            HttpResponse resp = get(WEB_CODE).send();
            checkStatusCode(resp, 200);

            String html = resp.getContent();
            Document doc = Jsoup.parse(html);

            checkTitle(doc, WEB_CODE, "Code");

            Element pre = getById(doc, WEB_CODE, "code_snippet", "pre");
            String webSnippetCode = pre.text();
            if (!webSnippetCode.trim().equals(apiSnippetCode.trim())) {
                return CheckResult.wrong("Web code snippet " +
                    "and api code snippet are different");
            }

            Element date = getById(doc, WEB_CODE, "load_date", "span");
            String webSnippetDate = date.text();
            if (!webSnippetDate.trim().equals(apiSnippetDate.trim())) {
                return CheckResult.wrong("Web snippet date " +
                    "and api snippet date are different");
            }

            return CheckResult.correct();
        }

        private CheckResult checkWebCodeNew() {
            HttpResponse resp = get(WEB_CODE_NEW).send();
            checkStatusCode(resp, 200);

            String html = resp.getContent();
            Document doc = Jsoup.parse(html);

            checkTitle(doc, WEB_CODE_NEW, "Create");

            getById(doc, WEB_CODE_NEW, "code_snippet", "textarea");
            getById(doc, WEB_CODE_NEW, "send_snippet", "button");

            return CheckResult.correct();
        }

        private CheckResult postSnippet(String snippet) {
            HttpResponse resp = post(API_CODE_NEW, "{\"code\":\"" + snippet + "\"}").send();
            checkStatusCode(resp, 200);

            expect(resp.getContent()).asJson().check(isObject());
            apiSnippetCode = snippet;
            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/resources/static/codeJSON.json
  visible: true
  text: |
    public static void main(String[] args) {
        SpringApplication.run(CodeSharingPlatform.class, args);
  learner_created: true
- name: src/resources/static/codeFile.html
  visible: true
  text: |-
    <html>
    <head>
      <title>Code</title>
    </head>
    <body>
    <pre>
    public static void main(String[] args) {
        SpringApplication.run(CodeSharingPlatform.class, args);
    }</pre>
    </body>
    </html>
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/11028#comment
status: Failed
feedback:
  message: |-
    Wrong answer in test #1

    The JSON object should contain a key &quot;date&quot;

    Full JSON:
    {
      &quot;code&quot;: &quot;public static void main(String[] args) {\n    SpringApplication.run(CodeSharingPlatform.class, args);\n}&quot;
    }

    Please find below the output of your program during this failed test.

    ---

    .   ____          _            __ _ _
     /\\ / ___&#39;_ __ _ _(_)_ __  __ _ \ \ \ \
    ( ( )\___ | &#39;_ | &#39;_| | &#39;_ \/ _` | \ \ \ \
     \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
      &#39;  |____| .__|_| |_|_| |_\__, | / / / /
     =========|_|==============|___/=/_/_/_/
     :: Spring Boot ::                (v2.5.6)

    2022-07-10 19:15:49.989  INFO 25660 --- [    Test worker] platform.CodeSharingPlatform             : Starting CodeSharingPlatform using Java 17.0.3 on DESKTOP-E88IM81 with PID 25660 (started by Bolotin in D:\Java_projects_and_resources\CodeSharingPlatform\Code Sharing Platform\task)
    2022-07-10 19:15:49.991  INFO 25660 --- [    Test worker] platform.CodeSharingPlatform             : No active profile set, falling back to default profiles: default
    2022-07-10 19:15:51.024  INFO 25660 --- [    Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8889 (http)
    2022-07-10 19:15:51.034  INFO 25660 --- [    Test worker] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
    2022-07-10 19:15:51.034  INFO 25660 --- [    Test worker] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.54]
    2022-07-10 19:15:51.125  INFO 25660 --- [    Test worker] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
    2022-07-10 19:15:51.126  INFO 25660 --- [    Test worker] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1090 ms
    2022-07-10 19:15:51.664  INFO 25660 --- [    Test worker] o.s.b.a.e.web.EndpointLinksResolver      : Exposing 14 endpoint(s) beneath base path &#39;/actuator&#39;
    2022-07-10 19:15:51.701  INFO 25660 --- [    Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8889 (http) with context path &#39;&#39;
    2022-07-10 19:15:51.713  INFO 25660 --- [    Test worker] platform.CodeSharingPlatform             : Started CodeSharingPlatform in 2.047 seconds (JVM running for 2.739)
    2022-07-10 19:15:51.993  INFO 25660 --- [nio-8889-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet &#39;dispatcherServlet&#39;
    2022-07-10 19:15:51.994  INFO 25660 --- [nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet &#39;dispatcherServlet&#39;
    2022-07-10 19:15:51.995  INFO 25660 --- [nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 1 ms
  time: Sun, 10 Jul 2022 16:15:52 UTC
record: 2
